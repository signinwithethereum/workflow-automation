name: Code Quality Review Only

on:
  workflow_call:
    inputs:
      config-profile:
        description: 'Configuration profile to use (default, frontend, backend, security, experimental)'
        required: false
        type: string
        default: 'default'
      repository-config:
        description: 'Path to repository-specific configuration file'
        required: false
        type: string
        default: '.github/ai-review-config.json'
      enable-security-review:
        description: 'Enable security-focused review'
        required: false
        type: boolean
        default: false
      enable-quality-review:
        description: 'Enable code quality review'
        required: false
        type: boolean  
        default: true
      enable-documentation-review:
        description: 'Enable documentation review'
        required: false
        type: boolean
        default: false
      max-review-time:
        description: 'Maximum time for review in minutes'
        required: false
        type: number
        default: 10
    secrets:
      DEV_OPS_BOT_CLAUDE_CODE_OAUTH_TOKEN:
        description: 'Claude Code OAuth token for authentication'
        required: true
      DEV_OPS_BOT_APP_ID:
        description: 'GitHub App ID for token generation'
        required: true
      DEV_OPS_BOT_PRIVATE_KEY:
        description: 'GitHub App private key for token generation'
        required: true
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key (fallback if Claude Code token fails)'
        required: false
      DEV_OPS_BOT_ALLOWED_USER_LIST:
        description: 'JSON array of allowed users for triggering reviews'
        required: false

jobs:
  load-configuration:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.load-config.outputs.config }}
      quality-prompt: ${{ steps.load-prompts.outputs.quality-prompt }}
      language: ${{ steps.detect-language.outputs.language }}
    steps:
      - name: Checkout Central Workflows
        uses: actions/checkout@v4
        with:
          repository: signinwithethereum/workflow-automation
          path: central-workflows
          ref: main

      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          path: target-repo
          fetch-depth: 0

      - name: Load Configuration
        id: load-config
        run: |
          CONFIG_FILE="central-workflows/configs/profiles/${{ inputs.config-profile }}.json"
          REPO_CONFIG_FILE="target-repo/${{ inputs.repository-config }}"
          
          # Start with profile configuration
          if [ -f "$CONFIG_FILE" ]; then
            CONFIG=$(cat "$CONFIG_FILE")
          else
            echo "Profile ${{ inputs.config-profile }} not found, using default"
            CONFIG=$(cat "central-workflows/configs/profiles/default.json")
          fi
          
          # Override with repository-specific config if it exists
          if [ -f "$REPO_CONFIG_FILE" ]; then
            REPO_CONFIG=$(cat "$REPO_CONFIG_FILE")
            # Merge configurations (repository config takes precedence)
            CONFIG=$(echo "$CONFIG $REPO_CONFIG" | jq -s '.[0] * .[1]')
          fi
          
          echo "config<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Detect Primary Language
        id: detect-language
        working-directory: target-repo
        run: |
          # Detect primary language based on file extensions in the PR
          LANGUAGE="javascript"  # default
          
          if find . -name "*.ts" -o -name "*.tsx" | head -1 | grep -q .; then
            LANGUAGE="typescript"
          elif find . -name "*.py" | head -1 | grep -q .; then
            LANGUAGE="python"
          elif find . -name "*.go" | head -1 | grep -q .; then
            LANGUAGE="go"
          elif find . -name "*.rs" | head -1 | grep -q .; then
            LANGUAGE="rust"
          elif find . -name "*.java" | head -1 | grep -q .; then
            LANGUAGE="java"
          elif find . -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" | head -1 | grep -q .; then
            LANGUAGE="cpp"
          elif find . -name "*.c" | head -1 | grep -q .; then
            LANGUAGE="c"
          elif find . -name "*.rb" | head -1 | grep -q .; then
            LANGUAGE="ruby"
          elif find . -name "*.php" | head -1 | grep -q .; then
            LANGUAGE="php"
          fi
          
          echo "language=$LANGUAGE" >> $GITHUB_OUTPUT
          echo "Detected language: $LANGUAGE"

      - name: Load Quality Prompt Template
        id: load-prompts
        run: |
          LANGUAGE="${{ steps.detect-language.outputs.language }}"
          
          # Load quality prompt only
          if [ -f "central-workflows/prompts/review/quality-${LANGUAGE}.md" ]; then
            QUALITY_PROMPT=$(cat "central-workflows/prompts/review/quality-${LANGUAGE}.md")
          else
            QUALITY_PROMPT=$(cat "central-workflows/prompts/review/quality-default.md")
          fi
          
          echo "quality-prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$QUALITY_PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  quality-review:
    needs: load-configuration
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Custom App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEV_OPS_BOT_APP_ID }}
          private-key: ${{ secrets.DEV_OPS_BOT_PRIVATE_KEY }}

      - name: AI Quality Review
        uses: 0xthrpw/claude-code-action@v0.0.1
        continue-on-error: true
        timeout-minutes: ${{ inputs.max-review-time }}
        with:
          claude_code_oauth_token: ${{ secrets.DEV_OPS_BOT_CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.generate-token.outputs.token }}
          direct_prompt: |
            ${{ needs.load-configuration.outputs.quality-prompt }}
            
            ## Configuration
            Language: ${{ needs.load-configuration.outputs.language }}
            Profile: ${{ inputs.config-profile }}
            Configuration: ${{ needs.load-configuration.outputs.config }}
            
            ## Additional Context
            Repository: ${{ github.repository }}
            PR Number: ${{ github.event.number }}
            Author: ${{ github.event.pull_request.user.login }}